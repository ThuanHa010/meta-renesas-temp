From aa5a9bdc2c6c306be94b407b25244b12984281e1 Mon Sep 17 00:00:00 2001
From: Nguyen Tran <nguyen.tran.pz@bp.renesas.com>
Date: Fri, 6 Sep 2024 09:47:50 +0000
Subject: [PATCH] iccom lib: add iccom sample test app

---
 Makefile          | 17 +++++++++--
 test/sample_app.c | 73 +++++++++++++++++++++++++++++++++++++++++++++++
 test/test.c       | 62 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 150 insertions(+), 2 deletions(-)
 create mode 100644 test/sample_app.c
 create mode 100644 test/test.c

diff --git a/Makefile b/Makefile
index db21078..3313754 100644
--- a/Makefile
+++ b/Makefile
@@ -5,6 +5,7 @@ CFLAGS += -g -Wall -I./public
 
 SRCDIR   = src
 OBJDIR   = $(SRCDIR)
+TESTDIR  = test
 OUTDIR   = out
 SRCS     = $(SRCDIR)/iccom_library.c
 OBJS     = $(OBJDIR)/iccom_library.o
@@ -12,6 +13,10 @@ LIBNAME  = libiccom.so
 SONAME   = $(LIBNAME).$(MAJOR_VERSION)
 REALNAME = $(SONAME).$(MINOR_VERSION)
 TARGET   = $(OUTDIR)/$(REALNAME)
+TESTSRC  = $(TESTDIR)/test.c
+TEST     = $(OUTDIR)/iccom-test
+APPSRC  = $(TESTDIR)/sample_app.c
+APP     = $(OUTDIR)/iccom-sample-app
 LOGLEVEL ?= LOGERR
 
 ifeq ($(LOGLEVEL),LOGERR)
@@ -23,15 +28,23 @@ else ifeq ($(LOGLEVEL),LOGDBG)
 else #ifeq ($(LOGLEVEL),LOGNONE)
 endif
 
+all : $(TARGET) $(TEST) $(APP)
+
 $(TARGET) : $(OBJS)
 	@mkdir -p $(OUTDIR)
-	$(CC) -shared -Wl,-soname=$(SONAME) -o $@ $< -pthread
+	$(CC) $(LDFLAGS) -shared -Wl,-soname=$(SONAME) -o $@ $< -pthread
 
 $(OBJS): $(SRCS)
 	@[ -d $(OBJDIR) ]
 	$(CC) $(CFLAGS) -fPIC -o $@ -c $<
 
+$(TEST) : $(TESTSRC) $(TARGET)
+	$(CC) $(CFLAGS) $(LDFLAGS) $(TESTSRC) $(TARGET) -o $@
+
+$(APP) : $(APPSRC) $(TARGET)
+	$(CC) $(CFLAGS) $(LDFLAGS) $(TESTSRC) $(TARGET) -o $@
+
 .PHONY: clean
 clean :
 	rm -f $(OBJS)
-	rm -f $(OUTDIR)/$(REALNAME)
+	rm -rf $(OUTDIR)
diff --git a/test/sample_app.c b/test/sample_app.c
new file mode 100644
index 0000000..c5b96d7
--- /dev/null
+++ b/test/sample_app.c
@@ -0,0 +1,73 @@
+#include <stdio.h>
+#include <string.h>
+#include <iccom.h>
+
+static void Iccom_app_CallBack(enum Iccom_channel_number channel_no, 
+                                    uint32_t recvSize, const uint8_t *pRecvBuff);
+
+static uint8_t ReceiveBuffer[ICCOM_BUF_MAX_SIZE];
+static uint8_t SendBuffer[ICCOM_BUF_MAX_SIZE];
+
+/*******************************************************************/
+/* Sample "Application" main */
+/*******************************************************************/
+int32_t main(void)
+{
+    int32_t ret;
+    int32_t len;
+    Iccom_channel_t pChannelHandle;
+    Iccom_init_param iccomInit;
+    Iccom_send_param send_para ;
+    printf("ICCOM SAMPLE start\n");
+
+    /* Set Channel number,buffer pointer,and call back function pointer */
+    iccomInit.channel_no = ICCOM_CHANNEL_0;
+    iccomInit.recv_buf = &ReceiveBuffer[0];
+    iccomInit.recv_cb = (Iccom_recv_callback_t)&Iccom_app_CallBack;
+    printf (" channel_no = %d\n",iccomInit.channel_no);
+
+    /*------------------------*/
+    /* Call initialize API */
+    /*------------------------*/
+    ret = Iccom_lib_Init(&iccomInit, &pChannelHandle);
+    if (ret != ICCOM_OK) {
+        printf (" Iccom_lib_Init error ret = %d\n",ret);
+        return ret;
+    }
+
+    /* Set send parameter */
+    (void)memset(SendBuffer, 0x00, ICCOM_BUF_MAX_SIZE);
+    len = sprintf((char *)SendBuffer,"Linux -ICCOM-TEST-SAMPLE DATA");
+    send_para.send_size = len ;
+    send_para.send_buf =SendBuffer;
+    send_para.channel_handle = pChannelHandle;
+    /*-------------------*/
+    /* Call send API */
+    /*-------------------*/
+    ret = Iccom_lib_Send(&send_para);
+    if (ret != ICCOM_OK) {
+        printf (" Iccom_lib_Send error ret = %d\n",ret);
+        return ret;
+    }
+    /*-------------------*/
+    /* Call final API */
+    /*-------------------*/
+    ret = Iccom_lib_Final(pChannelHandle);
+    if (ret != ICCOM_OK) {
+        printf (" Iccom_lib_Final error ret = %d\n",ret);
+        return ret;
+    }
+    printf("ICCOM SAMPLE end\n");
+    return ICCOM_OK;
+}
+
+/******************************************************************/
+/* Callback function */
+/******************************************************************/
+static void Iccom_app_CallBack(enum Iccom_channel_number channel_no,
+                                    uint32_t recv_size,
+                                    const uint8_t *recv_buf)
+{
+    uint8_t recvBuffer[ICCOM_BUF_MAX_SIZE];
+    (void)memcpy(&recvBuffer[0], recv_buf, recv_size);
+}
diff --git a/test/test.c b/test/test.c
new file mode 100644
index 0000000..6200a92
--- /dev/null
+++ b/test/test.c
@@ -0,0 +1,62 @@
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <iccom.h>
+
+static void callback(enum Iccom_channel_number ch, uint32_t sz, uint8_t *buf)
+{
+	int i;
+
+	printf("Received %u bytes: ", sz);
+
+	for (i = 0; i < sz; i++) {
+		if (buf[i] >= 0x20 && buf[i] < 0x80)
+			printf("%c", buf[i]);
+		else
+			printf("\\x%02x", buf[i]);
+	}
+
+	printf("\n");
+}
+
+static uint8_t rbuf[ICCOM_BUF_MAX_SIZE], sbuf[ICCOM_BUF_MAX_SIZE];
+
+int main(int argc, char *argv[])
+{
+	int ch, ret, len;
+	Iccom_channel_t pch;
+	Iccom_init_param ip;
+	Iccom_send_param sp;
+
+	if (argc > 1)
+		ch = strtoul(argv[1], NULL, 0);
+	else
+		ch = 0;
+
+	printf("ICCOM SAMPLE start, channel %d\n", ch);
+
+	ip.channel_no = ch;
+	ip.recv_buf = rbuf;
+	ip.recv_cb = callback;
+
+	ret = Iccom_lib_Init(&ip, &pch);
+	if (ret != ICCOM_OK) {
+		printf("Iccom_lib_Init error %d\n", ret);
+		return 1;
+	}
+
+	len = snprintf((char *)sbuf, sizeof(sbuf), "Linux-ICCOM-TEST-SAMPLE-data");
+	sp.send_size = len;
+	sp.send_buf = sbuf;
+	sp.channel_handle = pch;
+
+	ret = Iccom_lib_Send(&sp);
+	if (ret != ICCOM_OK) {
+		printf("Iccom_lib_Send error %d\n", ret);
+		return 1;
+	}
+
+	sleep(1);
+	return 0;
+}
-- 
2.25.1

